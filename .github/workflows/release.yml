name: release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: min2phase-ui-linux-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact: min2phase-ui-macos-aarch64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact: min2phase-ui-macos-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: min2phase-ui-windows-x86_64.exe

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Prepare artifact
        shell: bash
        run: |
          OUT_DIR=target/${{ matrix.target }}/release
          BIN_NAME=min2phase-ui
          if [[ "${{ matrix.os }}" == "Windows" ]]; then
            SRC="$OUT_DIR/${BIN_NAME}.exe"
            DST="${{ matrix.artifact }}"
          else
            SRC="$OUT_DIR/${BIN_NAME}"
            DST="${{ matrix.artifact }}"
          fi
          cp "$SRC" "$DST"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: ${{ matrix.artifact }}

  release:
    name: create release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


